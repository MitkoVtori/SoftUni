# Generated by Django 4.2.2 on 2023-06-30 09:16

import GameStats.Profile.validators
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'User with this username already exists!'}, max_length=30, unique=True, validators=[django.core.validators.MinLengthValidator(2, message='Username must be at least 2 characters long!'), GameStats.Profile.validators.letters_numbers_underscores])),
                ('email', models.EmailField(error_messages={'unique': 'User with this email address already exists!'}, max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=25, null=True, validators=[GameStats.Profile.validators.only_letters])),
                ('last_name', models.CharField(blank=True, max_length=25, null=True, validators=[GameStats.Profile.validators.only_letters])),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
